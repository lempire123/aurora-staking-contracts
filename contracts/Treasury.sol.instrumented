/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.10;

import "./ITreasury.sol";
import "./AdminControlled.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/__scribble_ReentrancyUtils.sol";

///  @title Treasury
///  @author Aurora Team
///  @dev Implementation of the treasury contract
///       This contract is holding all the aurora staking and streams funds.
///       It inherits adminControlled which gives admin more privilegs over this
///       this contract.
contract Treasury is __scribble_ReentrancyUtils, ITreasury, AdminControlled {
    using SafeERC20Upgradeable for IERC20Upgradeable;

    event TokenAdded(address indexed token, address indexed addedBy, uint256 timestamp);

    event TokenRemoved(address indexed token, address indexed addedBy, uint256 timestamp);

    bytes32 public constant TREASURY_MANAGER_ROLE = keccak256("TREASURY_MANAGER_ROLE");
    mapping(address => bool) public isSupportedToken;

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() initializer() {}

    function initialize(address[] memory _supportedTokens, uint256 _flags) external {
        _original_Treasury_initialize(_supportedTokens, _flags);
        unchecked {
            if (!(_supportedTokens.length < type(uint256).max)) {
                emit AssertionFailed("0: address[] array is too big");
                assert(false);
            }
        }
    }

    function _original_Treasury_initialize(address[] memory _supportedTokens, uint256 _flags) private initializer() {
        for (uint256 i = 0; i < _supportedTokens.length; i++) {
            require(_supportedTokens[i] != address(0), "INVALID_TOKEN_ADDRESS");
            isSupportedToken[_supportedTokens[i]] = true;
        }
        __AdminControlled_init(_flags);
        _grantRole(TREASURY_MANAGER_ROLE, msg.sender);
    }

    function payRewards(address _user, address _token, uint256 _amount) external {
        _original_Treasury_payRewards(_user, _token, _amount);
        unchecked {
            if (!(hasRole(DEFAULT_ADMIN_ROLE, msg.sender))) {
                emit AssertionFailed("1: non-admin user");
                assert(false);
            }
            if (!(isSupportedToken[_token])) {
                emit AssertionFailed("2: unsupported token");
                assert(false);
            }
        }
    }

    function _original_Treasury_payRewards(address _user, address _token, uint256 _amount) private onlyRole(DEFAULT_ADMIN_ROLE) {
        require(isSupportedToken[_token], "TOKEN_IS_NOT_SUPPORTED");
        IERC20Upgradeable(_token).safeTransfer(_user, _amount);
    }

    function addSupportedToken(address _token) external {
        _original_Treasury_addSupportedToken(_token);
        unchecked {
            if (!(hasRole(TREASURY_MANAGER_ROLE, msg.sender))) {
                emit AssertionFailed("3: non-manager user");
                assert(false);
            }
        }
    }

    function _original_Treasury_addSupportedToken(address _token) private pausable(1) onlyRole(TREASURY_MANAGER_ROLE) {
        require(!isSupportedToken[_token], "TOKEN_ALREADY_EXISTS");
        isSupportedToken[_token] = true;
        emit TokenAdded(_token, msg.sender, block.timestamp);
    }

    function removeSupportedToken(address _token) external {
        _original_Treasury_removeSupportedToken(_token);
        unchecked {
            if (!(hasRole(TREASURY_MANAGER_ROLE, msg.sender))) {
                emit AssertionFailed("4: non-manager user");
                assert(false);
            }
        }
    }

    function _original_Treasury_removeSupportedToken(address _token) private pausable(1) onlyRole(TREASURY_MANAGER_ROLE) {
        require(isSupportedToken[_token], "TOKEN_DOES_NOT_EXIST");
        isSupportedToken[_token] = false;
        emit TokenRemoved(_token, msg.sender, block.timestamp);
    }
}